use "std/conv"
use "std/os"

fn scalarMultiplication(matrix: [][]int, number: int, mut resultMatrix: [][]int, row: int, column: int) {
	mut i := 0
	for i < row; i++ {
		mut j := 0
		for j < column; j++ {
			resultMatrix[i][j] = matrix[i][j] * number
		}
	}
}

fn main() {
	print("Enter the number of rows of the matrix: ")
	row := conv::Atoi(os::Stdin().ReadLine()!)!

	print("Enter the number of columns of the matrix: ")
	column := conv::Atoi(os::Stdin().ReadLine()!)!

	mut matrix := make([][]int, row)
	for i in matrix {
		matrix[i] = make([]int, column)
	}

	print("\nEnter the matrix:\n")
	mut i := 0
	for i < row; i++ {
		print("Row ")
		print(i + 1)
		print(":\n")
		mut j := 0
		for j < column; j++ {
			matrix[i][j] = conv::Atoi(os::Stdin().ReadLine()!)!
		}
	}

	print("\nEnter the number to be multiplied by the matrix: ")
	number := conv::Atoi(os::Stdin().ReadLine()!)!

	mut resultMatrix := make([][]int, row)
	for j in resultMatrix {
		resultMatrix[j] = make([]int, column)
	}

	scalarMultiplication(matrix, number, resultMatrix, row, column)

	println("\nMatrix:")
	i = 0
	for i < row; i++ {
		mut j := 0
		for j < column; j++ {
			print(matrix[i][j])
			print(" ")
		}
		print("\n")
	}
	print("\n")

	println("Result Matrix:")
	i = 0
	for i < row; i++ {
		mut j := 0
		for j < column; j++ {
			print(resultMatrix[i][j])
			print(" ")
		}
		print("\n")
	}
	print("\n")
}
